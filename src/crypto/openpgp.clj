; A Bouncy Castle based OpenPGP library for Clojure.
; https://github.com/MailTube/crypto.openpgp
; This is free and unencumbered software released into the public domain.
(ns crypto.openpgp
  (:import
    [java.security SecureRandom]
    [org.apache.commons.math3.distribution BinomialDistribution]
    [org.apache.commons.math3.stat.inference ChiSquareTest]
    [org.apache.commons.math3.util FastMath]
    [org.bouncycastle.openpgp PGPUtil]))

(defn library-version [] "0.1.0")

(defn- nr-bitcount [input]
  (let [num (biginteger input)]
    (assert (>= (.signum num) 0)) 
    (.bitCount num)))

(defn- nr-expected [n runs]
  (let [d (new org.apache.commons.math3.distribution.BinomialDistribution n 0.5)]
    (vec (map #(* runs (.probability d %)) (range (inc n))))))

(defn- nr-observed [input bitsize runs]
  (loop [v (transient (vec (repeat (inc bitsize) 0))), r0 (biginteger (input)), i 0] 
    (if (< i runs)
      (let [r1 (biginteger (input)), bc (nr-bitcount (.xor r0 r1))]
        (recur (assoc! v bc (inc (v bc))) r1 (inc i)))
      (persistent! v))))

(defn- nr-run [input bitsize runs alpha]
  (let 
    [observed (nr-observed input bitsize runs), 
     expected (nr-expected bitsize runs),
     t (new org.apache.commons.math3.stat.inference.ChiSquareTest)]
    (.chiSquareTest t (double-array expected) (long-array observed) alpha)))

; A rough and very simple test to estimate whether a random number generator is compromised. Implemented as a SAC-test (Castro, Sierra, Seznec, Izquierdo, Ribagorda, 2005). Parameters: 'random' is an object of type java.util.Random; 'bitsize' is the size in bits of every number to be generated by 'random' for evaluation; the total amount of generated numbers will be 'runs'+1; 'alpha' is a threshold for p-value. The function calculates p-value and returns true when p-value < 'alpha'.
(defn not-random [random bitsize runs alpha]
  (nr-run #(new java.math.BigInteger bitsize random) bitsize runs alpha))

(defn- gp-b62 [d]
  ([\0 \1 \2 \3 \4 \5 \6 \7 \8 \9 
    \a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z 
    \A \B \C \D \E \F \G \H \I \J \K \L \M \N \O \P \Q \R \S \T \U \V \W \X \Y \Z]
    d))

; Generates a secure password and returns it in the form of a vector of random Character's. Parameter 'entropy' specifies the password desired strength in bits. Optional named parameters: 'random' is an object of type java.util.Random, defaults to a new java.security.SecureRandom; 'radix' is the size of a password alphabet, defaults to 62; 'mapping' is a function that maps a number into a corresponding alphabet's Character, default function maps into Base62.
(defn gen-password [entropy & 
                    {:keys [random radix mapping]
                     :or {random (new java.security.SecureRandom),
                          radix 62, mapping gp-b62}}]
  (let [num (new BigInteger entropy random),
        len (FastMath/round 
              (FastMath/ceil (* entropy (FastMath/log radix 2.0)))),
        gen (fn [[q _]] (.divideAndRemainder q (biginteger radix)))]
    (shuffle 
      (map mapping (take len (rest (map second (iterate gen [num 0]))))))))

(defn -main
  []
  (println (ns-name ((meta #'library-version) :ns)) (library-version)))
